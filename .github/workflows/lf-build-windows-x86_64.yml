name: 'Linuxfabrik: Build Windows (x86_64)'

on:
  workflow_dispatch:
    inputs:
      compile-plugins:
        description: 'Space-separated list of check plugins to compile and package, for example "cpu-usage feed scanrootkit". Leave empty to build all plugins.'
        required: false
        default: ''
      # target-distros:
      #   description: 'Space-separated list of operating systems to compile on and build packages for. Supported: `debian11 debian12 rocky8 rocky9 ubuntu2004 ubuntu2204 ubuntu2404`. Cannot be empty.'
      #   required: false
      #   default: 'debian11 debian12 rocky8 rocky9 ubuntu2004 ubuntu2204 ubuntu2404'
      package-iteration:
        description: 'The iteration number for the package (usually "1").'
        required: false
        default: '1'
      lib-repo-ref:
        description: 'The branch, tag, or SHA to checkout from the lib repo. Defaults to the current branch or tag.'
        required: false
        default: ''

# modify the default permissions granted to the GITHUB_TOKEN
permissions:
  contents: 'read'

jobs:
  build-packages:
    runs-on:
      - 'windows-2025'  # https://github.com/actions/runner-images/blob/main/images/windows/Windows2025-Readme.md
    steps:
      - name: 'Set environment variables for the build scripts'
        shell: 'bash'
        run: |
          echo "LFMP_ARCH=x86_64" >> $GITHUB_ENV
          echo "LFMP_COMPILE_PLUGINS=${{ github.event.inputs.compile-plugins }}" >> $GITHUB_ENV
          echo "LFMP_PACKAGE_ITERATION=${{ github.event.inputs.package-iteration }}" >> $GITHUB_ENV
          # echo "LFMP_TARGET_DISTROS=${{ github.event.inputs.target-distros }}" >> $GITHUB_ENV

          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

          echo "LFMP_DIR_REPOS=$GITHUB_WORKSPACE/repos" >> $GITHUB_ENV
          echo "LFMP_DIR_COMPILED=$RUNNER_TEMP/lfmp/compiled" >> $GITHUB_ENV
          echo "LFMP_DIR_DIST=$RUNNER_TEMP/lfmp/dist" >> $GITHUB_ENV
          echo "LFMP_DIR_PACKAGED=$RUNNER_TEMP/lfmp/packaged" >> $GITHUB_ENV

      - name: 'Create working directories'
        shell: 'bash'
        run: |
          mkdir -p $LFMP_DIR_REPOS
          mkdir -p $LFMP_DIR_COMPILED
          mkdir -p $LFMP_DIR_DIST
          mkdir -p $LFMP_DIR_PACKAGED

      - name: 'git clone https://github.com/Linuxfabrik/THIS-REPO'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          path: '${{ env.LFMP_DIR_REPOS }}/monitoring-plugins'

      - name: 'git clone https://github.com/Linuxfabrik/lib'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          repository: 'Linuxfabrik/lib'
          ref: '${{ inputs.lib-repo-ref || github.ref_name }}'
          path: '${{ env.LFMP_DIR_REPOS }}/lib'

      - name: 'Fetch the current version from Github'
        shell: 'bash'
        run: >
          /bin/bash
          $LFMP_DIR_REPOS/monitoring-plugins/build/get-latest-version.sh

      - name: 'Debug'
        shell: 'bash'
        run: >
          /bin/bash
          $LFMP_DIR_REPOS/monitoring-plugins/build/debug.sh

      - name: 'Install python3.13'
        uses: 'actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38' # v5.4.0
        with:
          python-version: '3.13'

      - name: 'python.exe -m pip install --upgrade pip wheel setuptools'
        run: 'python.exe -m pip install --upgrade pip wheel setuptools'

      # ordered-set is for nuitka: "Nuitka:WARNING: Using very slow fallback for ordered sets, please install 'ordered-set' or 'orderedset' PyPI packages for best Python compile time performance."
      - name: 'python.exe -m pip install --upgrade ordered-set Nuitka'
        run: 'python.exe -m pip install --upgrade ordered-set Nuitka'

      # install 3rd party libraries for all check plugins
      - name: 'python.exe -m pip install --requirement ${{ github.workspace }}\repos\monitoring-plugins\requirements-windows.txt --require-hashes'
        run: 'python.exe -m pip install --requirement ${{ github.workspace }}\repos\monitoring-plugins\requirements-windows.txt --require-hashes'

      - name: 'Verify Python installation'
        run: 'python.exe -m pip list'

      - name: 'Compile the check plugins'
        shell: 'bash'
        run: >
          /bin/bash
          $LFMP_DIR_REPOS/monitoring-plugins/build/compile-multiple.sh

      - name: 'Move and merge the relevant parts into $LFMP_DIR_DIST, the folder to build packages from'
        shell: 'bash'
        run: >
          /bin/bash
          $LFMP_DIR_REPOS/monitoring-plugins/build/merge-to-dist.sh

      - name: 'Upload the compiled plugins'
        uses: 'actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08' # v4.6.0
        with:
          path: '${{ env.LFMP_DIR_DIST }}/*'
          name: "lfmp-${{ env.LFMP_VERSION }}-${{ env.LFMP_PACKAGE_ITERATION }}.compiled.${{ env.LFMP_ARCH }}"

      - name: 'Configure MSBuild in the workflow PATH for building .NET Framework applications'
        uses: 'microsoft/setup-msbuild@v2'

      - name: 'Install WiX toolset, the packaging tool'
        run: 'dotnet tool install --global wix'

      - name: 'Verify WiX installation'
        run: 'wix --version'

      - name: 'Create the wxs file for WiX'
        shell: 'bash'
        run: >
          /bin/bash
          $LFMP_DIR_REPOS/monitoring-plugins/build/create-wxs.sh

      - name: 'Create the package for Windows'
        run: >
          wix.exe build
          -defaultcompressionlevel high
          ${{ env.LFMP_DIR_PACKAGED }}\lfmp.wxs
          -out ${{ env.LFMP_DIR_PACKAGED }}\linuxfabrik-monitoring-plugins.msi

      - name: 'Upload the package (msi)'
        uses: 'actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08' # v4.6.0
        with:
          path: '${{ env.LFMP_DIR_PACKAGED }}/*'
          name: "lfmp-${{ env.LFMP_VERSION }}-${{ env.LFMP_PACKAGE_ITERATION }}.packaged.${{ env.LFMP_ARCH }}"
