name: 'Linuxfabrik: Build Windows (x86_64)'

on:
  workflow_dispatch:
    inputs:
      # lib-repo-ref:
      #   description: 'The branch, tag, or SHA to checkout from the lib repo. Defaults to the current branch or tag.'
      #   required: false
      #   default: ''
      check-plugin:
        description: 'If you only want to compile a specific check plugin, specify its name, for example `cpu-usage`, otherwise leave empty to build all plugins.'
        required: false
        default: 'cpu-usage'

# modify the default permissions granted to the GITHUB_TOKEN
permissions:
  contents: 'read'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-packages:
    runs-on:
      - 'windows-2025'
    steps:
      - name: 'Debug Environment and Inputs'
        run: >
          echo
          check-plugin=${{ inputs.check-plugin }}
          lib-repo-ref=${{ inputs.lib-repo-ref }}

      - name: 'git checkout https://github.com/Linuxfabrik/monitoring-plugins'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          path: 'repos/monitoring-plugins'

      - name: 'git checkout https://github.com/Linuxfabrik/lib'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          repository: 'Linuxfabrik/lib'
          ref: '${{ inputs.lib-repo-ref || github.ref_name }}'
          path: 'repos/lib'

      - name: 'Install python3.12'
        uses: 'actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38' # v5.4.0
        with:
          python-version: '3.12'

      - run: 'python.exe -m pip install --upgrade pip wheel setuptools'

      # ordered-set is for nuitka: "Nuitka:WARNING: Using very slow fallback for ordered sets, please install 'ordered-set' or 'orderedset' PyPI packages for best Python compile time performance."
      - run: 'python.exe -m pip install --upgrade ordered-set Nuitka Nuitka'

      # install 3rd party libraries for all check plugins
      - run: 'python.exe -m pip install --requirement ${{ github.workspace }}\monitoring-plugins\requirements-windows.txt --require-hashes'

      # info in case of errors
      - run: 'python.exe -m pip list'

      - name: 'Configuring MSBuild in the workflow PATH for building .NET Framework applications'
        uses: 'microsoft/setup-msbuild@v2'

      - name: 'Install WiX toolset'
        run: 'dotnet tool install --global wix'

      - name: 'wix --version'
        run: 'wix --version'

      - name: 'Find and Download Latest Version Artifact'
        run: |
          GH_API_URL="https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/artifacts"
          ARTIFACT_NAME="version"

          echo "Fetching latest artifact..."

          # Fetch all artifacts and filter by name
          ARTIFACT_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" "$GH_API_URL" | \
            jq -r ".artifacts | map(select(.name == \"$ARTIFACT_NAME\")) | sort_by(.created_at) | last // {}")

          # Extract the download URL
          ARTIFACT_URL=$(echo "$ARTIFACT_INFO" | jq -r ".archive_download_url // empty")

          if [[ -z "$ARTIFACT_URL" ]]; then
            echo "❌ No previous version artifact found. Exiting..."
            exit 1
          else
            echo "✅ Downloading artifact from: $ARTIFACT_URL"
            curl -L -o version.zip -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$ARTIFACT_URL"
            mkdir -p version_artifact
            unzip -o version.zip -d version_artifact
            VERSION=$(cat version_artifact/version.txt)
            echo "✅ Extracted version: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          fi

      - name: 'Build the packages for Windows'
        run: >
          /bin/bash -x
          /repos/monitoring-plugins/build/windows/build.sh
          ${{ env.VERSION }}
          ${{ inputs.package-iteration || '1' }}
          ${{ runner.arch }}
          ${{ inputs.check-plugin || '' }}

      - name: 'Upload build output (zip)'
        uses: 'actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08' # v4.6.0
        with:
          path: '/c/tmp/output/summary'
          name: "lfmp-${{ env.VERSION }}-${{ inputs.package-iteration }}.${{ runner.arch == 'X64' && 'x86_64' || 'aarch64' }}"

      - name: 'Compile .wxs into .msi using WiX v5+'
        run: >
          wix.exe build
          -out C:\tmp\output\linuxfabrik-monitoring-plugins.msi
          C:\tmp\lfmp.wxs
        working-directory: '.'

      - name: 'Upload build output (msi)'
        uses: 'actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08' # v4.6.0
        with:
          path: 'c/tmp/output/linuxfabrik-monitoring-plugins.msi'
          name: "lfmp-${{ env.VERSION }}-${{ inputs.package-iteration }}.${{ runner.arch == 'X64' && 'x86_64' || 'aarch64' }}.msi"
