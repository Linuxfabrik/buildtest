name: 'Linuxfabrik: Build Windows (x86_64)'

on:
  workflow_dispatch:
    inputs:
      # lib-repo-ref:
      #   description: 'The branch, tag, or SHA to checkout from the lib repo. Defaults to the current branch or tag.'
      #   required: false
      #   default: ''
      check-plugin:
        description: 'If you only want to compile a specific check plugin, specify its name, for example `cpu-usage`, otherwise leave empty to build all plugins.'
        required: false
        default: 'cpu-usage'

# modify the default permissions granted to the GITHUB_TOKEN
permissions:
  contents: 'read'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  set-matrix:
    runs-on:
      - 'windows-2025'
    outputs:
      matrix: '${{ steps.generate-matrix.outputs.matrix }}'
    steps:
      - name: 'Generate Matrix'
        id: 'generate-matrix'
        run: |
          distros="${{ inputs.distros }}"
          matrix=$(echo "$distros" | jq --compact-output --raw-input '{"distros": split(",")}')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build-packages:
    runs-on:
      - 'windows-2025'
    needs:
      - 'set-matrix'
    strategy:
      matrix:
        distro: '${{ fromJson(needs.set-matrix.outputs.matrix).distros }}'
    steps:
      - name: 'Debug Environment and Inputs'
        run: >
          echo
          check-plugin=${{ inputs.check-plugin }}
          lib-repo-ref=${{ inputs.lib-repo-ref }}

      - name: 'git checkout https://github.com/Linuxfabrik/monitoring-plugins'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          path: 'repos/monitoring-plugins'

      - name: 'git checkout https://github.com/Linuxfabrik/lib'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          repository: 'Linuxfabrik/lib'
          ref: '${{ inputs.lib-repo-ref || github.ref_name }}'
          path: 'repos/lib'

      - name: 'mkdir -p build'
        run: 'mkdir -p build'

      - name: 'mkdir -p build/${{ matrix.distro }}'
        run: 'mkdir -p build/${{ matrix.distro }}'

      - name: 'Synchronize cached writes to persistent storage'
        run: 'sync'

      - name: '⚙️ apt-get -y install podman'
        run: |
          sudo apt-get update
          sudo apt-get -y install podman

      - name: 'Build msx file for WiX'
        shell: 'bash'
        run: |
          cat <<EOF > lfmp.wxs
          <Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
              <Package
                  Name="Linuxfabrik Monitoring Plugins"
                  Version="${{ env.VERSION }}"
                  Manufacturer="Linuxfabrik GmbH, Zurich, Switzerland"
                  UpgradeCode="bb340ae1-12a5-41d3-a27f-8677df3bdb2b"
              >
                  <StandardDirectory Id="CommonAppDataFolder">
                      <Directory Id="Icinga2Dir" Name="icinga2">
                          <Directory Id="UsrDir" Name="usr">
                              <Directory Id="Lib64Dir" Name="lib64">
                                  <Directory Id="NagiosDir" Name="nagios">
                                      <Directory Id="PluginsDir" Name="plugins">
                                          <!-- Automatically includes all files from the specified directory -->
                                          <Files Include="C:\tmp\output\summary\check-plugins\**" />
                                      </Directory>
                                  </Directory>
                              </Directory>
                          </Directory>
                      </Directory>
                  </StandardDirectory>
              </Package>
          </Wix>
          EOF

      - name: 'Find and Download Latest Version Artifact'
        run: |
          GH_API_URL="https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/artifacts"
          ARTIFACT_NAME="version"

          echo "Fetching latest artifact..."

          # Fetch all artifacts and filter by name
          ARTIFACT_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" "$GH_API_URL" | \
            jq -r ".artifacts | map(select(.name == \"$ARTIFACT_NAME\")) | sort_by(.created_at) | last // {}")

          # Extract the download URL
          ARTIFACT_URL=$(echo "$ARTIFACT_INFO" | jq -r ".archive_download_url // empty")

          if [[ -z "$ARTIFACT_URL" ]]; then
            echo "❌ No previous version artifact found. Exiting..."
            exit 1
          else
            echo "✅ Downloading artifact from: $ARTIFACT_URL"
            curl -L -o version.zip -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$ARTIFACT_URL"
            mkdir -p version_artifact
            unzip -o version.zip -d version_artifact
            VERSION=$(cat version_artifact/version.txt)
            echo "✅ Extracted version: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          fi

      - name: 'Build the packages for ${{ matrix.distro }}'
        run: >
          podman run
          --rm
          --mount type=bind,source=build/${{ matrix.distro }},destination=/build,relabel=private
          --mount type=bind,source=repos,destination=/repos,relabel=shared,ro=true
          "lfmp-build-${{ matrix.distro }}"
          /bin/bash -x
          /repos/monitoring-plugins/build/${{ matrix.distro }}/build.sh
          ${{ env.VERSION }}
          ${{ inputs.package-iteration || '1' }}
          ${{ runner.arch }}
          ${{ inputs.check-plugin || '' }}

      - name: 'Upload build output'
        uses: 'actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08' # v4.6.0
        with:
          path: 'build/'
          name: "lfmp-${{ env.VERSION }}-${{ inputs.package-iteration }}.${{ matrix.distro }}.${{ runner.arch == 'X64' && 'x86_64' || 'aarch64' }}"
